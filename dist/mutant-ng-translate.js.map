{"version":3,"sources":["translate.js","cache.js","directive.js","events.js","filter.js","loader-service.js","loader.js","service.js","storage-service.js","storage.js","utils.js"],"names":["angular","module","translateCache","$window","isSupportLocalStorage","localStorage","setItem","removeItem","exception","getFromLocalStorage","key","self","local","storage","JSON","parse","putToLocalStorage","obj","stringify","existsInLocalStorage","getValuesFromCache","lang","isSupported","lsKey","prefix","exists","put","get","setValuesToCache","values","cacheValues","cache","getValues","merge","getLangFromCache","setLangToCache","this","setValues","getLang","setLang","factory","translateDirective","$translate","$translateEvents","link","scope","element","attrs","translitionKey","update","innerHTML","translation","translationsUpdated","subscribe","langChanged","restrict","directive","translateEvents","$utils","partLoaded","event","allPartsLoaded","callback","disposable","undefined","error","subscriber","id","generateId","unsubscribe","subscribers","push","once","index","indexOf","splice","publish","data","slice","i","length","translateFilter","filter","$stateful","translateLoaderSvc","$timeout","$translateLoader","$translateUtils","config","options","storageCallback","preload","addParts","names","addPart","name","part","parts","loadPart","loadParts","force","sync","resetCounter","needLoad","loadingOn","partOptions","urlTemplate","dataTransformation","then","loadingOff","increaseCounter","checkCounter","loading","loaded","isLoading","isLoaded","counter","enabled","langs","delay","translateLoader","$http","$q","url","replace","resolve","reject","response","translate","$storage","$loader","validateOptions","setTranslations","defaultLang","translations","Object","prototype","toString","call","use","current","getTranslations","getTranslation","arguments","refresh","directDataTransformation","keyResolver","directKeyResolver","translateStorageSvc","$translateStorage","$translateCache","set","oldLang","from","to","cacheGetLang","cacheSetLang","cacheGetTranslations","cacheSetTranslations","storageGetLang","storageSetLang","storageGetTranslations","storageGetTranslation","getValue","storageSetTranslations","translateStorage","resolver","hasOwnProperty","tranlslateUtils","throw","message","Error","warning","write","console","warn"],"mappings":"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","file":"mutant-ng-translate.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * @ngdoc overview\r\n     * @name translate\r\n     * \r\n     * @description \r\n     * # MUTANT-NG-TRANSLATE \r\n     * ## General \r\n     * \r\n     * Internationalization library for Angular applications.  \r\n     * \r\n     * For quick start look to official {@link https://github.com/accetone/mutant-ng-translate readme file}.  \r\n     * Also you can find simple demo {@link http://accetone.github.io/mutant-ng-translate-docs/demo/ here}.  \r\n     * \r\n     * **Our key features**\r\n     * - native parts mechanism: load your locale files using complex url templates like `/locale-{part}-{lang}.json`  \r\n     * - parallel asynchronous loading: translations from part will be available and showed as soon as loaded  \r\n     * - built-in caching of loaded translations and choosed language using browser localstorage, \r\n     * so next time user will see translations imidiatelly  \r\n     * - configurable preload that load languages after primary language loaded,\r\n     * so you can make switch of language more gentle  \r\n     * \r\n     * ## Config options\r\n     * \r\n     * **Required options**  \r\n     * \r\n     * Url template and default language are only required.\r\n     * Other options are optional.\r\n     * \r\n     * ```javascript\r\n     * $translate.config({\r\n     *      defaultLang: 'en',\r\n     *      urlTemplate: '/locale-{part}-{lang}.json'\r\n     * });\r\n     * ```\r\n     * \r\n     * **One file per language**\r\n     * \r\n     * Url template should contain at least `{lang}` pattern. \r\n     * So if you have only one file per language, you can specify required template.\r\n     * \r\n     * ```javascript\r\n     * $translate.config({\r\n     *      defaultLang: 'en',\r\n     *      urlTemplate: '/locale/{lang}.json'\r\n     * });\r\n     * \r\n     * $translate.addPart('');\r\n     * ```\r\n     * \r\n     * **Complex JSON file**\r\n     * \r\n     * If your locale file not plain key-value file, you can pass `dataTransformation` function with options.\r\n     * This function should transfrom you data to plain key-value object (hashmap).\r\n     * You can find signature {@link translate.utils here} (see `directDataTransformation`). \r\n     * \r\n     * ```javascript\r\n     * $translate.config({\r\n     *      ...\r\n     *      dataTranformation: funciton (data) {\r\n     *          return data.translations;       \r\n     *      }\r\n     * });\r\n     * ```\r\n     * \r\n     * **Custom non existing translations**\r\n     * \r\n     * By default you will see `key` if translation for this `key` not exist for current language.\r\n     * If you want to change this behaviour you can pass `keyResolver` function with options.\r\n     * This function should receive `key` and return default translation.\r\n     * You can find signature {@link translate.utils here} (see `directKeyResolver`). \r\n     * \r\n     * ```javascript\r\n     * $translate.config({\r\n     *      ...\r\n     *      keyResolver: funciton (key) {\r\n     *          return '';     \r\n     *      }\r\n     * });\r\n     * ```\r\n     * \r\n     * **Disable cache**\r\n     * \r\n     * If you want to disable cache of translations or preferred language in client localstorage\r\n     * you can pass `cache` object with options.\r\n     * \r\n     * ```javascript\r\n     * $translate.config({\r\n     *      ...\r\n     *      cache: {          \r\n     *          lang: false,\r\n     * \r\n     *          // not required to write, default value already true\r\n     *          translations: true\r\n     *      }\r\n     * });\r\n     * ```\r\n     * \r\n     * **Preload**\r\n     * \r\n     * You can pass list of languages that will be loaded after first language \r\n     * (in most times it would be default or preferred). \r\n     * This feature can make swithing of languages more smooth.\r\n     * Don't worry, already loaded languages will not load twice.\r\n     * \r\n     * ```javascript\r\n     * $translate.config({\r\n     *      ...\r\n     *      preload: {\r\n     *          langs: ['en', 'fr', 'de']\r\n     *      }\r\n     * });\r\n     * ```\r\n     * \r\n     * Also you can configure preload delay - \r\n     * time after first language loaded and start loading preload languages.\r\n     * \r\n     * ```javascript\r\n     * $translate.config({\r\n     *      ...\r\n     *      preload: {\r\n     *          langs: ['en', 'fr', 'de'],\r\n     * \r\n     *          // in milliseconds\r\n     *          delay: 10000\r\n     *      }\r\n     * });\r\n     * ```\r\n     * \r\n     * **Events**  \r\n     * \r\n     * If you want you can subscribe to library events.\r\n     * More information you can find {@link translate.events here}\r\n     * \r\n     */\r\n    angular\r\n        .module('mutant-ng-translate', []);\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('mutant-ng-translate')\r\n        .factory('$translateCache', ['$window', translateCache]);\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name translate.cache\r\n     * @requires $window\r\n     * \r\n     * @description \r\n     * Service responsible for caching the translations data and prefered language in local storage, if it supported by browser\r\n     */\r\n    function translateCache($window) {\r\n        var self = this;\r\n\r\n        self.local = {\r\n            prefix: 'mutant-ng-translate-',\r\n            isSupported: isSupportLocalStorage(),\r\n            storage: $window.localStorage,\r\n            get: getFromLocalStorage,\r\n            put: putToLocalStorage,\r\n            exists: existsInLocalStorage\r\n        };\r\n\r\n        self.cache = {\r\n            getValues: getValuesFromCache,\r\n            setValues: setValuesToCache,\r\n            getLang: getLangFromCache,\r\n            setLang: setLangToCache\r\n        };\r\n\r\n        return self.cache;\r\n\r\n        // LOCAL STORAGE\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.cache\r\n         * @name isSupportLocalStorage\r\n         * \r\n         * @returns {boolean} Is Support\r\n         * \r\n         * @description \r\n         * Check if browser support localstorage\r\n         */\r\n        function isSupportLocalStorage() {\r\n            try {\r\n                $window.localStorage.setItem('test', 'test');\r\n                $window.localStorage.removeItem('test');\r\n\r\n                return true;\r\n            } catch (exception) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.cache\r\n         * @name getFromLocalStorage\r\n         * \r\n         * @param {string} key Key\r\n         * @returns {Object | string} Value\r\n         * \r\n         * @description \r\n         * Get value by given key from local storage\r\n         */\r\n        function getFromLocalStorage(key) {\r\n            if (!self.local.storage[key]) return undefined;\r\n            return JSON.parse(self.local.storage[key]);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.cache\r\n         * @name putToLocalStorage\r\n         * \r\n         * @param {string} key Key\r\n         * @param {Object | string} obj Object\r\n         * \r\n         * @description \r\n         * Put value into local storage by given key\r\n         */\r\n        function putToLocalStorage(key, obj) {\r\n            self.local.storage[key] = JSON.stringify(obj);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.cache\r\n         * @name existsInLocalStorage\r\n         * \r\n         * @param {string} key Key\r\n         * @returns {boolean} Is Exists\r\n         * \r\n         * @description \r\n         * Check if given key exists in local storage\r\n         */\r\n        function existsInLocalStorage(key) {\r\n            return !!self.local.storage[key];\r\n        }\r\n\r\n        // CACHE\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.cache\r\n         * @name getValuesFromCache\r\n         * \r\n         * @param {string} lang Language\r\n         * @returns {Object<string, string>} Values Hashmap\r\n         * \r\n         * @description \r\n         * Return values hashmap from local storage for given language.\r\n         * If local storage not supported or hashmap for given language not exists will return empty object\r\n         */\r\n        function getValuesFromCache(lang) {\r\n            if (!self.local.isSupported) return {};\r\n\r\n            var lsKey = self.local.prefix + lang;\r\n\r\n            if (!self.local.exists(lsKey)) {\r\n                self.local.put(lsKey, {});\r\n            }\r\n\r\n            return self.local.get(lsKey);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.cache\r\n         * @name setValuesToCache\r\n         * \r\n         * @param {string} lang Language\r\n         * @param {Object<string, string>} values Values Hashmap\r\n         * \r\n         * @description \r\n         * Merge local storage hashmap for given language with passed hashmap and put result to local storage.\r\n         * If local storage not supported will do nothing\r\n         */\r\n        function setValuesToCache(lang, values) {\r\n            if (!self.local.isSupported) return;\r\n\r\n            var lsKey = self.local.prefix + lang;\r\n            var cacheValues = self.cache.getValues(lang);\r\n\r\n            angular.merge(cacheValues, values);\r\n\r\n            self.local.put(lsKey, cacheValues);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.cache\r\n         * @name getLangFromCache\r\n         * \r\n         * @returns {string | undefined} Language\r\n         * \r\n         * @description \r\n         * Return langugage from local storage.\r\n         * If local storage not supported or language not exists in local storage will return undefined\r\n         */\r\n        function getLangFromCache() {\r\n            if (!self.local.isSupported) return undefined;\r\n\r\n            var lsKey = self.local.prefix + 'lang';\r\n\r\n            return self.local.get(lsKey);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.cache\r\n         * @name setLangToCache\r\n         * \r\n         * @param {string} lang Language\r\n         * \r\n         * @description \r\n         * Put language to local storage.\r\n         * If local storage not supported will do nothing\r\n         */\r\n        function setLangToCache(lang) {\r\n            if (!self.local.isSupported) return;\r\n\r\n            var lsKey = self.local.prefix + 'lang';\r\n\r\n            self.local.put(lsKey, lang);\r\n        }\r\n    };\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('mutant-ng-translate')\r\n        .directive('ngTranslate', ['$translate', '$translateEvents', translateDirective]);\r\n\r\n    /**\r\n     * @ngdoc directive\r\n     * @name translate.directive:ngTranslate\r\n     * @restrict 'A'\r\n     * @element ANY\r\n     * @requires translate.$translate\r\n     * @requires translate.events\r\n     * \r\n     * @param {string} ngTranslate Translation key\r\n     * \r\n     * @description \r\n     * Transform any html element to the translation container. \r\n     * Translations get from {@link translate.$translate $translate} service by specified key\r\n     */\r\n    function translateDirective($translate, $translateEvents) {\r\n        var link = function (scope, element, attrs) {\r\n            element = element[0];\r\n\r\n            var translitionKey = attrs['ngTranslate'];\r\n\r\n            var update = function() {\r\n                element.innerHTML = $translate.translation(translitionKey);\r\n            };\r\n\r\n            $translateEvents.translationsUpdated.subscribe(update);\r\n            $translateEvents.langChanged.subscribe(update);\r\n\r\n            element.innerHTML = $translate.translation(translitionKey);\r\n        };\r\n\r\n        return {\r\n            restrict: 'A',\r\n            link: link\r\n        };\r\n    };\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('mutant-ng-translate')\r\n        .factory('$translateEvents', ['$translateUtils', translateEvents]);\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name translate.events\r\n     * @requires translate.utils\r\n     * \r\n     * @description \r\n     * Service responsible for providing access to library events. \r\n     * Provide list of event objects and you can subscribe to each (see implementation {@link translate.event here}). \r\n     * \r\n     * @example\r\n     * ```javascript\r\n     * var callback = function (data) { console.log(data); }\r\n     * \r\n     * // how subscribe ?\r\n     * var token = $translateEvents.langChanged.subscribe(callback);\r\n     * \r\n     * // how unsibscribe ?\r\n     * token.unsibscribe();\r\n     * \r\n     * // how to register one-time callback ?\r\n     * var token2 = $translateEvents.langChanged.subscribe(callback, true);\r\n     * ```\r\n     */\r\n    function translateEvents($utils) {\r\n        var self = this;\r\n\r\n        /**\r\n         * @ngdoc event\r\n         * @eventOf translate.events\r\n         * @name partLoaded\r\n         * \r\n         * @param {string} data { part: partname, lang: language key }\r\n         * \r\n         * @description \r\n         * Fires when any part for any language loaded\r\n         */\r\n        self.partLoaded = new event($utils);\r\n\r\n        /**\r\n         * @ngdoc event\r\n         * @eventOf translate.events\r\n         * @name allPartsLoaded\r\n         * \r\n         * @param {string} data { lang: language key }\r\n         * \r\n         * @description \r\n         * Fires when all registered parts for some language loaded\r\n         */\r\n        self.allPartsLoaded = new event($utils);\r\n\r\n        /**\r\n         * @ngdoc event\r\n         * @eventOf translate.events\r\n         * @name translationsUpdated\r\n         * \r\n         * @param {string} data { lang: language key }\r\n         * \r\n         * @description \r\n         * Fires when translations for any language updated\r\n         */\r\n        self.translationsUpdated = new event($utils);\r\n\r\n        /**\r\n         * @ngdoc event\r\n         * @eventOf translate.events\r\n         * @name langChanged\r\n         * \r\n         * @param {string} data { from: old language key, to: new language key }\r\n         * \r\n         * @description \r\n         * Fires when language changed\r\n         */\r\n        self.langChanged = new event($utils);\r\n\r\n        return self;\r\n    }\r\n\r\n    /**\r\n     * @ngdoc object\r\n     * @name translate.event\r\n     * @requires translate.utils\r\n     * \r\n     * @description\r\n     * Used to create event objects in {@link translate.events}\r\n     */\r\n    function event($utils) {\r\n        var self = this;\r\n       \r\n        self.subscribers = [];\r\n        self.subscribe = subscribe;\r\n        self.once = once;\r\n        self.unsubscribe = unsubscribe;\r\n        self.publish = publish;\r\n\r\n        self.id = 0;\r\n        self.generateId = generateId;\r\n\r\n        return {\r\n            subscribe: self.subscribe,\r\n            once: self.once,\r\n            publish: self.publish\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.event\r\n         * @name subscribe\r\n         * \r\n         * @param {function} callback Event callback\r\n         * @param {boolean} [disposable] Disposable\r\n         * @returns {Object} Subscribtion Token\r\n         * \r\n         * @description \r\n         * Put callback to subscribers list. \r\n         * Return subscription token, so subscriber can unsubscribe.\r\n         * Disposable subscription mean automatical unsubscribe after one call\r\n         */\r\n        function subscribe(callback, disposable) {\r\n            if (callback == undefined) {\r\n                $utils.error.throw('callback must be defined to subscribe for an event');\r\n            } else if (typeof callback !== 'function') {\r\n                $utils.error.throw('callback must be a function to subscribe for an event');\r\n            }\r\n\r\n            var subscriber = {\r\n                id: self.generateId(),\r\n                callback: disposable \r\n                    ? function() {\r\n                        subscriber.unsubscribe();\r\n                        callback();\r\n                    } \r\n                    : callback,\r\n                unsubscribe: self.unsubscribe\r\n            };\r\n\r\n            self.subscribers.push(subscriber);\r\n\r\n            return subscriber;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.event\r\n         * @name once\r\n         *\r\n         * @param {function} callback Event callback\r\n         * @returns {Object} Subscribtion Token\r\n         *\r\n         * @description\r\n         * Put callback to subscribers list with automatical unsubscribe after one call (short-hand for subscribe(callback, true)).\r\n         * Return subscription token, so subscriber can unsubscribe.\r\n         */\r\n        function once(callback) {\r\n            return subscribe(callback, true);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.event\r\n         * @name unsubscribe\r\n         * \r\n         * @returns {boolean} Is Success\r\n         * \r\n         * @description \r\n         * Delete subscriber from subscribtion list\r\n         */\r\n        function unsubscribe() {\r\n            var index = self.subscribers.indexOf(this);\r\n            if (index === -1) return false;\r\n\r\n            self.subscribers.splice(index, 1);\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.event\r\n         * @name publish\r\n         * \r\n         * @param {Object} data Data\r\n         * \r\n         * @description \r\n         * Call all registered callbacks and pass given data to them\r\n         */\r\n        function publish(data) {\r\n            var subscribers = self.subscribers.slice();\r\n\r\n            for (var i = 0; i < subscribers.length; i++) {\r\n                subscribers[i].callback(data);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.event\r\n         * @name generateId\r\n         * \r\n         * @returns {number} Id\r\n         * \r\n         * @description \r\n         * Generate unique subscribtion id (unique within specific event object)\r\n         */\r\n        function generateId() {\r\n            return self.id++;\r\n        }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('mutant-ng-translate')\r\n        .filter('translate', ['$translate', translateFilter]);\r\n\r\n    /**\r\n     * @ngdoc filter\r\n     * @name translate.filter:translate\r\n     * @function\r\n     * @requires translate.$translate\r\n     * \r\n     * @param {string} translate_expression Translation key\r\n     * \r\n     * @description \r\n     * Transform translation key into translation\r\n     */\r\n    function translateFilter($translate) {\r\n        var filter = function(key) {\r\n            return $translate.translation(key);\r\n        };\r\n\r\n        filter.$stateful = true;\r\n\r\n        return filter;\r\n    };\r\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('mutant-ng-translate')\r\n        .factory('$translateLoaderSvc', ['$timeout', '$translateLoader', '$translateEvents', '$translateUtils', translateLoaderSvc]);\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name translate.loaderService\r\n     * @requires $timeout\r\n     * @requires translate.loader\r\n     * @requires translate.events\r\n     * @requires translate.utils\r\n     * \r\n     * @description \r\n     * Service responsible for managing parts loading process\r\n     */\r\n    function translateLoaderSvc($timeout, $translateLoader, $translateEvents, $translateUtils) {\r\n        var self = this;\r\n\r\n        self.config = config;\r\n        self.options = undefined;\r\n        self.storageCallback = undefined;\r\n\r\n        self.parts = [];\r\n\r\n        self.addParts = addParts;\r\n        self.addPart = addPart;\r\n\r\n        self.loadParts = loadParts;\r\n        self.loadPart = loadPart;\r\n\r\n        self.sync = {\r\n            counter: {},\r\n            loading: {},\r\n            loaded: {},\r\n\r\n            loadingOn: loadingOn,\r\n            loadingOff: loadingOff,\r\n            isLoading: isLoading,\r\n            isLoaded: isLoaded,\r\n            needLoad: needLoad,\r\n\r\n            increaseCounter: increaseCounter,\r\n            resetCounter: resetCounter,\r\n            checkCounter: checkCounter\r\n        };\r\n\r\n        self.preload = preload;\r\n\r\n        return self;\r\n\r\n        /* CONFIG */\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.loaderService\r\n         * @name config\r\n         * \r\n         * @param {Object} options Options\r\n         * @param {function(string, Object))} storageCallback Storage Callback\r\n         * \r\n         * @description \r\n         * Initialize loader service with configuration info:  \r\n         * - options (url template, data transformation function and preload info)  \r\n         * - storage callback (should receive lang and hashmap and put them to storage)  \r\n         *  \r\n         * Always called by {@link translate.$translate $translate} during initialization process \r\n         */\r\n        function config(options, storageCallback) {\r\n            self.options = options;\r\n            self.storageCallback = storageCallback;\r\n\r\n            $translateEvents.allPartsLoaded.subscribe(self.preload, true);\r\n        }\r\n\r\n        /* PARTS */\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.loaderService\r\n         * @name addParts\r\n         * \r\n         * @param {Array<string>} names Part names\r\n         * @param {string} lang Language\r\n         * \r\n         * @description \r\n         * Add parts to list and start loading them for given language\r\n         */\r\n        function addParts(names, lang) {\r\n            for (var i = 0; i < names.length; i++) {\r\n                self.addPart(names[i], lang);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.loaderService\r\n         * @name addPart\r\n         * \r\n         * @param {string} name Part name\r\n         * @param {string} lang Language\r\n         * \r\n         * @description \r\n         * Add part to list and start loading it for given language\r\n         */\r\n        function addPart(name, lang) {\r\n            if (typeof name !== 'string') {\r\n                $translateUtils.error.throw('incorrect value for part name');\r\n            }\r\n\r\n            var part = { name: name };\r\n            \r\n            for (var i = 0; i < self.parts.length; i++) {\r\n                if (self.parts[i].name === part.name) return;\r\n            }\r\n\r\n            if (self.parts.indexOf(part) !== -1) return;\r\n\r\n            self.parts.push(part);\r\n\r\n            self.loadPart(part, lang);\r\n        }\r\n        \r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.loaderService\r\n         * @name loadParts\r\n         * \r\n         * @param {string} lang Language\r\n         * @param {boolean} [force] Force \r\n         * \r\n         * @description \r\n         * Start parts loading for given language in non-blocking mode. \r\n         * Before each part-lang pair start loading check if loading for this pair in progress or it already loaded.\r\n         * In this case loading will be prevented. \r\n         * If called with force param, will skip this check.\r\n         */\r\n        function loadParts(lang, force) {\r\n            if (force) {\r\n                self.sync.resetCounter(lang);\r\n            }\r\n\r\n            for (var i = 0; i < self.parts.length; i++) {\r\n                if (!force && !self.sync.needLoad(self.parts[i], lang)) continue;\r\n\r\n                self.loadPart(self.parts[i], lang);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.loaderService\r\n         * @name loadPart\r\n         * \r\n         * @param {Object} part Part\r\n         * @param {string} lang Language\r\n         * \r\n         * @description \r\n         * Start loading given part for given language. \r\n         * After succesful loading will put received data into storage and fire part loaded event.\r\n         * Also call loading syncronization functions.\r\n         */\r\n        function loadPart(part, lang) {\r\n            self.sync.loadingOn(part, lang);\r\n\r\n            var partOptions = {\r\n                part: part,\r\n                lang: lang,\r\n                urlTemplate: self.options.urlTemplate,\r\n                dataTransformation: self.options.dataTransformation\r\n            };\r\n\r\n            $translateLoader\r\n                .loadPart(partOptions)\r\n                .then(function(values) {\r\n                    self.sync.loadingOff(part, lang);\r\n                    self.sync.increaseCounter(lang);\r\n                    self.sync.checkCounter(lang);\r\n\r\n                    self.storageCallback(lang, values);\r\n\r\n                    $translateEvents.partLoaded.publish({ part: part.name, lang: lang});\r\n                });\r\n        }\r\n\r\n        /* SYNCHRONIZATION */\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.loaderService\r\n         * @name loadingOn\r\n         * \r\n         * @param {Object} part Part\r\n         * @param {string} lang Language\r\n         * \r\n         * @description \r\n         * Mark given part-lang pair as loading in progress\r\n         */\r\n        function loadingOn(part, lang) {\r\n            self.sync.loading[lang + '.' + part.name] = true;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.loaderService\r\n         * @name loadingOff\r\n         * \r\n         * @param {Object} part Part\r\n         * @param {string} lang Language\r\n         * \r\n         * @description \r\n         * Mark given part-lang pair as loaded\r\n         */\r\n        function loadingOff(part, lang) {\r\n            self.sync.loading[lang + '.' + part.name] = false;\r\n            self.sync.loaded[lang + '.' + part.name] = true;\r\n        }\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.loaderService\r\n         * @name isLoading\r\n         * \r\n         * @param {Object} part Part\r\n         * @param {string} lang Language\r\n         * @returns {boolean} Is Loading\r\n         * \r\n         * @description \r\n         * Return `true` if loading for given part-lang pair in progress\r\n         */\r\n        function isLoading(part, lang) {\r\n            return self.sync.loading[lang + '.' + part.name];\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.loaderService\r\n         * @name isLoaded\r\n         * \r\n         * @param {Object} part Part\r\n         * @param {string} lang Language\r\n         * @returns {boolean} Is Loaded \r\n         * \r\n         * @description \r\n         * Return `true` if given part-lang pair already loaded\r\n         */\r\n        function isLoaded(part, lang) {\r\n            return !!self.sync.loaded[lang + '.' + part.name];\r\n        }\r\n        \r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.loaderService\r\n         * @name increaseCounter\r\n         * \r\n         * @param {string} lang Language\r\n         * \r\n         * @description \r\n         * Increase parts loaded counter for given language\r\n         */\r\n        function increaseCounter(lang) {\r\n            if (!self.sync.counter[lang]) self.sync.counter[lang] = 1;\r\n            else self.sync.counter[lang]++;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.loaderService\r\n         * @name resetCounter\r\n         * \r\n         * @param {string} lang Language\r\n         * \r\n         * @description \r\n         * Reset parts loaded counter for given language\r\n         */\r\n        function resetCounter(lang) {\r\n            self.sync.counter[lang] = 0;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.loaderService\r\n         * @name checkCounter\r\n         * \r\n         * @param {string} lang Language\r\n         * \r\n         * @description \r\n         * Fire all parts loaded event if parts loaded counter for given language equals to parts count\r\n         */\r\n        function checkCounter(lang) {\r\n            if (self.sync.counter[lang] !== self.parts.length) return;\r\n\r\n            $translateEvents.allPartsLoaded.publish({ lang: lang });\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.loaderService\r\n         * @name needLoad\r\n         * \r\n         * @param {Object} part Part\r\n         * @param {string} lang Language\r\n         * @returns {boolean} Is Load Needed\r\n         * \r\n         * @description \r\n         * Check if given part-lang pair require loading. \r\n         * Return `true` if pair loading not in progress and pair not loaded before\r\n         */\r\n        function needLoad(part, lang) {\r\n            return !isLoading(part, lang) && !isLoaded(part, lang);\r\n        }\r\n\r\n        /* PRELOAD */\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.loaderService\r\n         * @name preload\r\n         * \r\n         * @description \r\n         * Start loading parts for languages in preload list after configured delay.\r\n         * Will called when all parts for some language loaded (only one time).\r\n         * Will not cause loading for already loaded part-lang pairs. \r\n         */\r\n        function preload() {\r\n            if (!self.options.preload.enabled || !self.options.preload.langs) return;\r\n\r\n            $timeout(function () {\r\n                for (var i = 0; i < self.options.preload.langs.length; i++) {\r\n                    var lang = self.options.preload.langs[i];\r\n\r\n                    self.loadParts(lang);\r\n                }\r\n            }, self.options.preload.delay);\r\n        }\r\n    }\r\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('mutant-ng-translate')\r\n        .factory('$translateLoader', ['$http', '$q', translateLoader]);\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name translate.loader\r\n     * @requires $http\r\n     * @requires $q\r\n     * \r\n     * @description \r\n     * Service responsible for loading parts\r\n     */\r\n    function translateLoader($http, $q) {\r\n        var self = this;\r\n\r\n        self.loadPart = loadPart;\r\n\r\n        return self;\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.loader\r\n         * @name loadPart\r\n         * \r\n         * @param {Object} options Options\r\n         * @returns {Promise} Loading Promise\r\n         * \r\n         * @description \r\n         * Start part loading with given options and return promise.\r\n         * Promise will be resolved after loading complete.\r\n         * Transform received from server data with data transformation function.\r\n         * Transformed data will be passed with promise resolve.\r\n         */\r\n        function loadPart(options) {\r\n            var url = options\r\n                .urlTemplate\r\n                .replace(/{part}/g, options.part.name)\r\n                .replace(/{lang}/g, options.lang);\r\n\r\n            return $q(function (resolve, reject) {\r\n                $http\r\n                    .get(url)\r\n                    .then(function (response) {\r\n                        var values = options.dataTransformation(response.data);\r\n                        resolve(values);\r\n                    })\r\n                    .catch(function (error) {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        }\r\n    };\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('mutant-ng-translate')\r\n        .factory('$translate', ['$translateStorageSvc', '$translateLoaderSvc', '$translateUtils', translate]);\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name translate.$translate\r\n     * @requires translate.storageService\r\n     * @requires translate.loaderService\r\n     * @requires translate.utils\r\n     * \r\n     * @description \r\n     * Service responsible for comunication with external code and manage other parts to work mutually\r\n     */\r\n    function translate($storage, $loader, $utils) {\r\n        var self = this;\r\n\r\n        self.options = {\r\n            dataTransformation: $utils.directDataTransformation,\r\n            keyResolver: $utils.directKeyResolver,\r\n            cache: {\r\n                translations: true,\r\n                lang: true\r\n            },\r\n            preload: {\r\n                enabled: true,\r\n                langs: [],\r\n                delay: 0\r\n            }\r\n        };\r\n        \r\n        self.config = config;\r\n        self.validateOptions = validateOptions;\r\n     \r\n        self.use = use;\r\n        self.current = current;\r\n\r\n        self.translations = translations;\r\n        self.translation = translation;\r\n\r\n        self.addPart = addPart;\r\n        self.addParts = addParts;\r\n\r\n        self.refresh = refresh;\r\n\r\n        return self;\r\n        \r\n        /* INITIALIZATION */\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.$translate\r\n         * @name config\r\n         * \r\n         * @param {Object} options Options\r\n         * \r\n         * @description \r\n         * Merge external options with default library options. \r\n         * Initialize {@link translate.storageService storageService} and {@link translate.loaderService loaderService}\r\n         */\r\n        function config(options) {\r\n            angular.merge(self.options, options);\r\n            self.validateOptions(self.options);\r\n\r\n            $storage.config(self.options);\r\n            $loader.config(self.options, $storage.setTranslations);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.$translate\r\n         * @name validateOptions\r\n         * \r\n         * @param {Object} options Options\r\n         * \r\n         * @description \r\n         * Throw error if options are corrupt\r\n         */\r\n        function validateOptions(options) {\r\n            // default lang\r\n            if (!options.defaultLang) {\r\n                $utils.error.throw('you didn\\'t specify default language');\r\n            }\r\n\r\n            if (typeof options.defaultLang !== 'string') {\r\n                $utils.error.throw('incorrect value for default language');\r\n            }\r\n\r\n            // url template\r\n            if (!options.urlTemplate) {\r\n                $utils.error.throw('you didn\\'t specify url template');\r\n            }\r\n\r\n            if (typeof options.urlTemplate !== 'string') {\r\n                $utils.error.throw('incorrect value url template');\r\n            }\r\n\r\n            if (options.urlTemplate.indexOf('{lang}') === -1) {\r\n                $utils.error.throw('url template should contain at least {lang} expression');\r\n            }\r\n\r\n            // data transformation\r\n            if (typeof options.dataTransformation !== 'function') {\r\n                $utils.error.throw('incorrect value for data transformation');\r\n            }\r\n\r\n            // cache\r\n            if (typeof options.cache !== 'object') {\r\n                $utils.error.throw('incorrect value for cache');\r\n            }\r\n\r\n            if (typeof options.cache.translations !== 'boolean') {\r\n                $utils.error.throw('incorrect value for cache translations');\r\n            }\r\n\r\n            if (typeof options.cache.lang !== 'boolean') {\r\n                $utils.error.throw('incorrect value for cache language');\r\n            }\r\n\r\n            // preload\r\n            if (typeof options.preload !== 'object') {\r\n                $utils.error.throw('incorrect value for preload');\r\n            }\r\n\r\n            if (typeof options.preload.enabled !== 'boolean') {\r\n                $utils.error.throw('incorrect value for preload enabled');\r\n            }\r\n\r\n            if (Object.prototype.toString.call(options.preload.langs) !== '[object Array]') {\r\n                $utils.error.throw('incorrect value for preload langs');\r\n            }\r\n\r\n            if (typeof options.preload.delay !== 'number') {\r\n                $utils.error.throw('incorrect value for preload delay');\r\n            }\r\n        }\r\n\r\n        /* LANGS */\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.$translate\r\n         * @name use\r\n         * \r\n         * @param {string} lang Language\r\n         * \r\n         * @description \r\n         * Set current language to given and start loading parts for it.\r\n         * Do nothing if passed language equal to current\r\n         */\r\n        function use(lang) {\r\n            if (typeof lang !== 'string') {\r\n                $utils.error.throw('incorrect value for lang to use');\r\n            }\r\n\r\n            if ($storage.getLang() === lang) return;\r\n\r\n            $storage.setLang(lang);\r\n            $loader.loadParts(lang, false);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.$translate\r\n         * @name current\r\n         * \r\n         * @returns {string} Language \r\n         * \r\n         * @description \r\n         * Return current language\r\n         */\r\n        function current() {\r\n            return $storage.getLang();\r\n        }\r\n\r\n        /* TRANSLATIONS */\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.$translate\r\n         * @name translations\r\n         * \r\n         * @returns {Object<string, string>} Translations Hashmap \r\n         * \r\n         * @description \r\n         * Return translation hashmap for current language\r\n         */\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.$translate\r\n         * @name translations\r\n         * \r\n         * @param {string} lang Language\r\n         * @returns {Object<string, string>} Translations Hashmap \r\n         * \r\n         * @description \r\n         * Return translation hashmap for given language\r\n         */\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.$translate\r\n         * @name translations\r\n         * \r\n         * @param {string} lang Language\r\n         * @param {Object<string, string>} values Translations Hashmap\r\n         * @returns {Object<string, string>} Updated Translations Hashmap \r\n         * \r\n         * @description \r\n         * Put given translations hashmap to storage service for given language.\r\n         * After that return updated translations hashmap for given language\r\n         */\r\n        function translations(lang, values) {\r\n            if (!lang) {\r\n                lang = $storage.getLang();\r\n            }\r\n\r\n            if (!!values) {\r\n                $storage.setTranslations(lang, values);\r\n            }\r\n\r\n            return $storage.getTranslations(lang);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.$translate\r\n         * @name translation\r\n         * \r\n         * @param {string} key Translation Key\r\n         * @returns {string} Translation\r\n         * \r\n         * @description \r\n         * Return translation for current language and given translation key\r\n         */\r\n        function translation(key) {\r\n            var lang = $storage.getLang();\r\n\r\n            return $storage.getTranslation(lang, key);\r\n        } \r\n\r\n        /* PARTS */\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.$translate\r\n         * @name addParts\r\n         * \r\n         * @param {string} name1 Part Name 1\r\n         * @param {string} [name2] Part Name 2\r\n         * @param {string} [...] ...\r\n         * \r\n         * @description \r\n         * Add parts for current language.\r\n         * Loading will start automatically.\r\n         * Pass part names as separate params\r\n         */\r\n        function addParts() {\r\n            var lang = $storage.getLang();\r\n\r\n            $loader.addParts(arguments, lang);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.$translate\r\n         * @name addPart\r\n         * \r\n         * @param {string} name Part Name\r\n         * \r\n         * @description \r\n         * Add part for current language.\r\n         * Loading will start automatically\r\n         */\r\n        function addPart(name) {\r\n            var lang = $storage.getLang();\r\n\r\n            $loader.addPart(name, lang);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.$translate\r\n         * @name refresh\r\n         * \r\n         * @param {boolean} force Force\r\n         * \r\n         * @description \r\n         * Call force reload of all added parts for current language\r\n         */\r\n        function refresh(force) {\r\n            var lang = $storage.getLang();\r\n\r\n            $loader.loadParts(lang, force);\r\n        }\r\n    }\r\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('mutant-ng-translate')\r\n        .factory('$translateStorageSvc', ['$translateStorage', '$translateCache', '$translateEvents', translateStorageSvc]);\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name translate.storageService\r\n     * @requires translate.storage\r\n     * @requires translate.cache\r\n     * @requires translate.events\r\n     * \r\n     * @description \r\n     * Service responsible for managing storing and caching processes\r\n     */\r\n    function translateStorageSvc($translateStorage, $translateCache, $translateEvents) {\r\n        var self = this;\r\n\r\n        self.config = config;\r\n        self.options = undefined;\r\n\r\n        self.cache = {\r\n            get: {\r\n                lang: cacheGetLang,\r\n                translations: cacheGetTranslations\r\n            },\r\n            set: {\r\n                lang: cacheSetLang,\r\n                translations: cacheSetTranslations\r\n            }\r\n        };\r\n\r\n        self.storage = {\r\n            get: {\r\n                lang: storageGetLang,\r\n                translations: storageGetTranslations,\r\n                translation: storageGetTranslation\r\n            },\r\n            set: {\r\n                lang: storageSetLang,\r\n                translations: storageSetTranslations\r\n            }\r\n        };\r\n\r\n        self.setTranslations = setTranslations;\r\n        self.getTranslations = getTranslations;\r\n        self.getTranslation = getTranslation;\r\n\r\n        self.setLang = setLang;\r\n        self.getLang = getLang;\r\n\r\n        return self;\r\n\r\n        /* CONFIG */\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.storageService\r\n         * @name config\r\n         * \r\n         * @param {Object} options Options\r\n         * \r\n         * @description \r\n         * Initialize storage service with options (cache info and default language).\r\n         * Choose language to work and load translations from cache.\r\n         * Always called by {@link translate.$translate $translate} during initialization process \r\n         */\r\n        function config(options) {\r\n            self.options = options;\r\n\r\n            var lang = self.cache.get.lang();\r\n            var translations = self.cache.get.translations(lang);\r\n\r\n            self.storage.set.lang(lang);\r\n            self.storage.set.translations(lang, translations);\r\n        }\r\n\r\n        /* TRANSLATIONS */\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.storageService \r\n         * @name setTranslations\r\n         * \r\n         * @param {string} lang Language\r\n         * @param {Object<string, string>} values Translations Hashmap\r\n         * \r\n         * @description \r\n         * Put given translations for given language into storage and cache. \r\n         * Fire translations updated event\r\n         */\r\n        function setTranslations(lang, values) {\r\n            self.storage.set.translations(lang, values);\r\n            self.cache.set.translations(lang, values);\r\n\r\n            $translateEvents.translationsUpdated.publish({ lang: lang });\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.storageService \r\n         * @name getTranslations\r\n         * \r\n         * @param {string} lang Language\r\n         * @returns {Object<string, string>} Translations Hashmap \r\n         * \r\n         * @description \r\n         * Return translations hashmap for given language from storage\r\n         */\r\n        function getTranslations(lang) {\r\n            return self.storage.get.translations(lang);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.storageService \r\n         * @name getTranslation\r\n         * \r\n         * @param {string} lang Language\r\n         * @param {string} key Translation key\r\n         * @returns {string} Translation\r\n         * \r\n         * @description \r\n         * Return translation for given language and translation key.\r\n         * If translation with this key not exist will use key resolver\r\n         */\r\n        function getTranslation(lang, key) {\r\n            return self.storage.get.translation(lang, key);\r\n        }\r\n\r\n        /* LANGUAGE */\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.storageService \r\n         * @name setLang\r\n         * \r\n         * @param {string} lang Language\r\n         * \r\n         * @description \r\n         * Put given language to cache and storage.\r\n         * Load translations for new language from cache to storage.\r\n         * Fire language changed event\r\n         */\r\n        function setLang(lang) {\r\n            var oldLang = self.storage.get.lang();\r\n\r\n            self.storage.set.lang(lang);\r\n            self.cache.set.lang(lang);\r\n\r\n            if (!$translateStorage.exists(lang)) {\r\n                var translations = self.cache.get.translations(lang);\r\n                self.storage.set.translations(lang, translations);\r\n            }\r\n\r\n            $translateEvents.langChanged.publish({ from: oldLang, to: lang });\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.storageService \r\n         * @name getLang\r\n         * \r\n         * @returns {string} Language \r\n         * \r\n         * @description \r\n         * Return language from storage\r\n         */\r\n        function getLang() {\r\n            return self.storage.get.lang();\r\n        }\r\n\r\n        /* CACHE */\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.storageService \r\n         * @name cacheGetLang\r\n         * \r\n         * @returns {string} Language \r\n         * \r\n         * @description \r\n         * Return language from cache. \r\n         * If cache disabled will return default language\r\n         */\r\n        function cacheGetLang() {\r\n            var lang = undefined;\r\n\r\n            if (self.options.cache.lang) {\r\n                lang = $translateCache.getLang();\r\n            }\r\n\r\n            if (!lang) {\r\n                lang = self.options.defaultLang;\r\n            }\r\n\r\n            return lang;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.storageService \r\n         * @name cacheSetLang\r\n         * \r\n         * @param {string} lang Language\r\n         * \r\n         * @description \r\n         * Put language to cache if it enabled\r\n         */\r\n        function cacheSetLang(lang) {\r\n            if (!self.options.cache.lang) return;\r\n\r\n            $translateCache.setLang(lang);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.storageService \r\n         * @name cacheGetTranslations\r\n         * \r\n         * @param {string} lang Language\r\n         * @returns {Object<string, string>} Translations Hashmap\r\n         * \r\n         * @description \r\n         * Return translations hashmap for given language from cache.\r\n         * If cache disabled will return empty object\r\n         */\r\n        function cacheGetTranslations(lang) {\r\n            if (!self.options.cache.translations) return {};\r\n\r\n            return $translateCache.getValues(lang);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.storageService \r\n         * @name cacheSetTranslations\r\n         * \r\n         * @param {string} lang Language\r\n         * @param {Object<string, string>} values Translations Hashmap\r\n         * \r\n         * @description \r\n         * Put given translations hashmap for given language to cache if it enabled\r\n         */\r\n        function cacheSetTranslations(lang, values) {\r\n            if (!self.options.cache.translations) return;\r\n\r\n            $translateCache.setValues(lang, values);\r\n        }\r\n\r\n        /* STORAGE */\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.storageService \r\n         * @name storageGetLang\r\n         * \r\n         * @returns {string} Language \r\n         * \r\n         * @description \r\n         * Return language from storage (decorate options.lang)\r\n         */\r\n        function storageGetLang() {\r\n            return self.options.lang;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.storageService \r\n         * @name storageSetLang\r\n         * \r\n         * @param {string} lang Language\r\n         * \r\n         * @description \r\n         * Put given language to storage (decorate options.lang)\r\n         */\r\n        function storageSetLang(lang) {\r\n            self.options.lang = lang;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.storageService \r\n         * @name storageGetTranslations\r\n         * \r\n         * @param {string} lang Language\r\n         * @returns {Object<string, string>} Translations Hashmap\r\n         * \r\n         * @description \r\n         * Return translations hashmap for given language from storage\r\n         */\r\n        function storageGetTranslations(lang) {\r\n            return $translateStorage.getValues(lang);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.storageService \r\n         * @name storageGetTranslation\r\n         * \r\n         * @param {string} lang Language\r\n         * @param {string} key Translation Key\r\n         * @returns {string} Translation \r\n         * \r\n         * @description \r\n         * Return translation for given translation key and language from storage\r\n         */\r\n        function storageGetTranslation(lang, key) {\r\n            return $translateStorage.getValue(lang, key, self.options.keyResolver);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.storageService\r\n         * @name storageSetTranslations\r\n         * \r\n         * @param {string} lang Language\r\n         * @param {Object<string, string>} values Translations Hashmap\r\n         * \r\n         * @description \r\n         * Put given translations hashmap for given language to storage\r\n         */\r\n        function storageSetTranslations(lang, values) {\r\n            $translateStorage.setValues(lang, values);\r\n        }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('mutant-ng-translate')\r\n        .factory('$translateStorage', [translateStorage]);\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name translate.storage\r\n     * \r\n     * @description \r\n     * Service responsible for storing the translations data while app is running\r\n     */\r\n    function translateStorage() {\r\n        var self = this;\r\n\r\n        self.langs = {};\r\n\r\n        self.getValues = getValues;\r\n        self.getValue = getValue;\r\n        self.setValues = setValues;\r\n\r\n        self.exists = exists;\r\n\r\n        return self;\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.storage\r\n         * @name getValues\r\n         * \r\n         * @param {string} lang Language\r\n         * @returns {Object.<string, string>} Values Hashmap\r\n         * \r\n         * @description \r\n         * Return values hashmap for given language\r\n         */\r\n        function getValues(lang) {\r\n            if (!self.exists(lang)) {\r\n                self.langs[lang] = {};\r\n            }\r\n\r\n            return self.langs[lang];\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.storage\r\n         * @name getValue\r\n         * \r\n         * @param {string} lang Language\r\n         * @param {string} key Key\r\n         * @returns {string} Value\r\n         * \r\n         * @description \r\n         * Return value by key from language hashmap\r\n         */\r\n        function getValue(lang, key, resolver) {\r\n            if (!self.exists(lang, key)) {\r\n                if (typeof resolver === 'function') {\r\n                    return resolver(key);\r\n                } else {\r\n                    return key;\r\n                }\r\n            }\r\n\r\n            return self.langs[lang][key];\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.storage\r\n         * @name setValues\r\n         * \r\n         * @param {string} lang Language\r\n         * @param {Object.<string, string>} values Values Hashmap\r\n         * \r\n         * @description \r\n         * Merge existing hashmap for given language with passed hashmap. \r\n         * If hashmap not exists, will create empty object first\r\n         */\r\n        function setValues(lang, values) {\r\n            if (!self.langs.hasOwnProperty(lang)) {\r\n                self.langs[lang] = {};\r\n            }\r\n\r\n            angular.merge(self.langs[lang], values);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.storage\r\n         * @name exists\r\n         * \r\n         * @param {string} lang Language\r\n         * @param {string} key Key\r\n         * @returns {boolean} Is Exists\r\n         * \r\n         * @description \r\n         * Check if key exists in language hashmap \r\n         */\r\n        function exists(lang, key) {\r\n            if (!self.langs.hasOwnProperty(lang)) return false;\r\n\r\n            if (!!key && !self.langs[lang].hasOwnProperty(key)) return false;\r\n\r\n            return true;\r\n        }\r\n    };\r\n})();","(function() {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('mutant-ng-translate')\r\n        .factory('$translateUtils', [tranlslateUtils]);\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name translate.utils\r\n     * \r\n     * @description \r\n     * Service provides some utility functions like errors, warnings and etc.\r\n     */\r\n    function tranlslateUtils() {\r\n        var self = this;\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.utils\r\n         * @name directDataTransformation\r\n         * \r\n         * @param {Object} values Values\r\n         * @returns {Object} Transformed Values\r\n         * \r\n         * @description \r\n         * Return passed values without changes. \r\n         * Used for default transformation of received translations data\r\n         */\r\n        self.directDataTransformation = function (values) {\r\n            return values;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.utils\r\n         * @name directKeyResolver\r\n         * \r\n         * @param {string} key Key\r\n         * @returns {string} Value\r\n         * \r\n         * @description \r\n         * Return passed key without changes.\r\n         * Used for default key resolving when external code require non existing key\r\n         */\r\n        self.directKeyResolver = function (key) {\r\n            return key;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.utils\r\n         * @name errorThrow\r\n         * \r\n         * @description \r\n         * Throw error with library prefix\r\n         * \r\n         * @example \r\n         * ```javascript\r\n         * $translateUtils.error.throw('error message');\r\n         * ```\r\n         */\r\n        self.error = {\r\n            prefix: '[mutant-ng-translate]: ',\r\n            throw: function (message) {\r\n                throw new Error(self.error.prefix + message);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @methodOf translate.utils\r\n         * @name warningThrow\r\n         * \r\n         * @description \r\n         * Write warning with library prefix\r\n         * \r\n         * @example \r\n         * ```javascript\r\n         * $translateUtils.warning.throw('error message');\r\n         * ```\r\n         */\r\n        self.warning = {\r\n            write: console != undefined\r\n                && console.warn != undefined\r\n                && typeof console.warn === 'function'\r\n                ? console.warn\r\n                : function() {},\r\n            throw: function(message) {\r\n                self.warning.write(self.error.prefix + message);\r\n            }\r\n        };\r\n\r\n        return self;\r\n    };\r\n})();"],"sourceRoot":"/source/"}